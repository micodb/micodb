name: Build and Upload Release Assets

on:
  release:
    types: [created]

jobs:
  build:
    name: Build and Upload Release Assets
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: linux
            arch: x86_64
          - target: aarch64-unknown-linux-gnu
            os: linux
            arch: arm64
          - target: x86_64-apple-darwin
            os: macos
            arch: x86_64
          - target: aarch64-apple-darwin
            os: macos
            arch: arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.target }}
          override: true
          
      - name: Print environment info
        run: |
          echo "OS: $(uname -s)"
          echo "Architecture: $(uname -m)"
          echo "Target: ${{ matrix.target }}"
          echo "CFLAGS: $CFLAGS"
          echo "CXXFLAGS: $CXXFLAGS"
          echo "Rust version: $(rustc --version)"
          echo "Cargo version: $(cargo --version)"

      - name: Install cross-compilation tools
        if: matrix.os == 'linux' && matrix.arch == 'arm64'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

      - name: Build release binary
        run: |
          # Set environment variables to fix cross-platform build issues
          if [[ "${{ matrix.os }}" != "macos" ]]; then
            # Clear macOS-specific flags for non-macOS targets
            export CFLAGS=""
            export CXXFLAGS=""
            export MACOSX_DEPLOYMENT_TARGET=""
          fi
          
          if [[ "${{ matrix.os }}" == "linux" && "${{ matrix.arch }}" == "arm64" ]]; then
            # Use cross for aarch64 Linux builds
            cargo install cross
            cross build --release --target ${{ matrix.target }}
          else
            # Regular build for other targets
            cargo build --release --target ${{ matrix.target }}
          fi

      - name: Prepare package
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          PACKAGE_NAME="micodb-${TAG_NAME}-${{ matrix.os }}-${{ matrix.arch }}"
          mkdir -p ${PACKAGE_NAME}/bin
          mkdir -p ${PACKAGE_NAME}/config
          
          # Copy binary to package
          if [ "${{ matrix.os }}" == "linux" ]; then
            cp target/${{ matrix.target }}/release/micodb ${PACKAGE_NAME}/bin/
          elif [ "${{ matrix.os }}" == "macos" ]; then
            cp target/${{ matrix.target }}/release/micodb ${PACKAGE_NAME}/bin/
          fi
          
          # Copy config files
          cp node_config.json ${PACKAGE_NAME}/config/node_config.json
          cp worker_config.json ${PACKAGE_NAME}/config/worker_config.json
          
          # Create default config
          cp node_config.json ${PACKAGE_NAME}/config/default_config.json
          
          # Create tarball
          tar -czf "${PACKAGE_NAME}.tar.gz" ${PACKAGE_NAME}
        
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./micodb-${{ github.ref_name }}-${{ matrix.os }}-${{ matrix.arch }}.tar.gz
          asset_name: micodb-${{ github.ref_name }}-${{ matrix.os }}-${{ matrix.arch }}.tar.gz
          asset_content_type: application/gzip